// Mocks generated by Mockito 5.2.0 from annotations
// in erp_employee_app/test/features/auth/domain/providers/auth_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:erp_employee_app/core/data/api/api.dart' as _i2;
import 'package:erp_employee_app/features/auth/data/models/user.dart' as _i3;
import 'package:erp_employee_app/features/auth/data/platform/auth_storage.dart'
    as _i6;
import 'package:erp_employee_app/features/auth/domain/repository/auth_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeApi_0<T> extends _i1.Fake implements _i2.Api<T> {}

class _FakeUser_1 extends _i1.Fake implements _i3.User {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Api<dynamic> get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeApi_0<dynamic>()) as _i2.Api<dynamic>);
  @override
  _i5.Future<_i3.User> signIn({String? username, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signIn, [], {#username: username, #password: password}),
              returnValue: Future<_i3.User>.value(_FakeUser_1()))
          as _i5.Future<_i3.User>);
}

/// A class which mocks [AuthStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStorage extends _i1.Mock implements _i6.AuthStorage {
  MockAuthStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveToken(_i3.User? user) =>
      (super.noSuchMethod(Invocation.method(#saveToken, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeToken() =>
      (super.noSuchMethod(Invocation.method(#removeToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
